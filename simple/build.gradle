buildscript {
	ext {
		springBootVersion = '1.5.0.BUILD-SNAPSHOT'
		wrapperVersion = '0.0.1.BUILD-SNAPSHOT'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot.experimental:spring-boot-thin-launcher:${wrapperVersion}")
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'maven'

def version(def dep) {
	if (dep.version) return ':' + dep.version
	def version = dependencyManagement.managedVersions["${dep.group}:${dep.name}"]
	return version ? ':' + version : ''
}

task libs << {
	def file = new File("$buildDir/resources/main/META-INF/lib.properties")
	file.parentFile.mkdirs()
	file.text='transitive.enabled: false\n'
	configurations.runtime.resolvedConfiguration.resolvedArtifacts.each {
		def dep = it.moduleVersion.id; 
		file << "dependencies.${dep.name}: ${dep.group}:${dep.name}${version(dep)}\n"
	}
}

jar.dependsOn = [libs]

jar {
	baseName = 'simple'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
}

springBoot { layout = 'THIN' }

configurations { compile.exclude module: 'spring-boot-starter-tomcat' }

dependencies {
	compile('org.springframework.cloud:spring-cloud-starter-config')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-jetty')
	compile('org.springframework.boot:spring-boot-starter-actuator')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.RELEASE"
	}
}
